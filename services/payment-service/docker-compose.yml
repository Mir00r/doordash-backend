# Payment Service - Local Development Docker Compose
# This file sets up the complete payment service environment for local development

version: '3.8'

services:
  # PostgreSQL Database
  payment-db:
    image: postgres:15-alpine
    container_name: payment-db
    environment:
      POSTGRES_DB: payment_db
      POSTGRES_USER: payment_user
      POSTGRES_PASSWORD: payment_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - payment_db_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - payment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payment_user -d payment_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  payment-redis:
    image: redis:7-alpine
    container_name: payment-redis
    ports:
      - "6380:6379"
    volumes:
      - payment_redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Kafka
  payment-kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: payment-kafka
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: payment-zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://payment-kafka:29092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    depends_on:
      - payment-zookeeper
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zookeeper for Kafka
  payment-zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: payment-zookeeper
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - payment_zookeeper_data:/var/lib/zookeeper/data
      - payment_zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - payment-network

  # Payment Service Application
  payment-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8085:8085"
    environment:
      # Database Configuration
      DB_USERNAME: payment_user
      DB_PASSWORD: payment_pass
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment-db:5432/payment_db
      
      # Redis Configuration
      SPRING_DATA_REDIS_HOST: payment-redis
      SPRING_DATA_REDIS_PORT: 6379
      
      # Kafka Configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: payment-kafka:29092
      
      # Payment Provider Configuration (Development/Test Keys)
      STRIPE_API_KEY: sk_test_51234567890abcdef
      STRIPE_WEBHOOK_SECRET: whsec_test_123
      PAYPAL_CLIENT_ID: test_paypal_client_id
      PAYPAL_CLIENT_SECRET: test_paypal_client_secret
      PAYPAL_MODE: sandbox
      BRAINTREE_MERCHANT_ID: test_merchant_id
      BRAINTREE_PUBLIC_KEY: test_public_key
      BRAINTREE_PRIVATE_KEY: test_private_key
      BRAINTREE_ENVIRONMENT: sandbox
      
      # Security Configuration
      JWT_ISSUER_URI: http://localhost:8080/auth/realms/doordash
      JWT_JWK_SET_URI: http://localhost:8080/auth/realms/doordash/protocol/openid-connect/certs
      PAYMENT_ENCRYPTION_KEY: test_encryption_key_32_chars_long
      
      # Application Configuration
      SPRING_PROFILES_ACTIVE: docker,dev
      LOGGING_LEVEL_COM_DOORDASH_PAYMENT: DEBUG
      
    depends_on:
      payment-db:
        condition: service_healthy
      payment-redis:
        condition: service_healthy
      payment-kafka:
        condition: service_healthy
    networks:
      - payment-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Prometheus for Monitoring
  payment-prometheus:
    image: prom/prometheus:latest
    container_name: payment-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - payment_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - payment-network

  # Grafana for Dashboards
  payment-grafana:
    image: grafana/grafana:latest
    container_name: payment-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - payment_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - payment-prometheus
    networks:
      - payment-network

  # Kafka UI for Development
  payment-kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: payment-kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: payment-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: payment-kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: payment-zookeeper:2181
    depends_on:
      - payment-kafka
    networks:
      - payment-network

  # pgAdmin for Database Management
  payment-pgadmin:
    image: dpage/pgadmin4:latest
    container_name: payment-pgadmin
    ports:
      - "5051:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@doordash.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - payment_pgadmin_data:/var/lib/pgadmin
    depends_on:
      - payment-db
    networks:
      - payment-network

volumes:
  payment_db_data:
    driver: local
  payment_redis_data:
    driver: local
  payment_zookeeper_data:
    driver: local
  payment_zookeeper_logs:
    driver: local
  payment_prometheus_data:
    driver: local
  payment_grafana_data:
    driver: local
  payment_pgadmin_data:
    driver: local

networks:
  payment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
