# Payment Service Configuration
# Environment: Development

# Server Configuration
server:
  port: 8085
  servlet:
    context-path: /api/v1
  compression:
    enabled: true
  http2:
    enabled: true

# Spring Boot Configuration
spring:
  application:
    name: payment-service
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/payment_db
    username: ${DB_USERNAME:payment_user}
    password: ${DB_PASSWORD:payment_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  # Flyway Configuration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
  
  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      jedis:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 1
      buffer-memory: 33554432
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: payment-service-group
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "com.doordash.payment.dto.event"
  
  # Security Configuration
  security:
    oauth2:
      resource-server:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080/auth/realms/doordash}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8080/auth/realms/doordash/protocol/openid-connect/certs}

# Payment Provider Configuration
payment:
  providers:
    stripe:
      api-key: ${STRIPE_API_KEY:sk_test_}
      webhook-secret: ${STRIPE_WEBHOOK_SECRET:whsec_}
      api-version: "2023-10-16"
    paypal:
      client-id: ${PAYPAL_CLIENT_ID:}
      client-secret: ${PAYPAL_CLIENT_SECRET:}
      mode: ${PAYPAL_MODE:sandbox}
    braintree:
      merchant-id: ${BRAINTREE_MERCHANT_ID:}
      public-key: ${BRAINTREE_PUBLIC_KEY:}
      private-key: ${BRAINTREE_PRIVATE_KEY:}
      environment: ${BRAINTREE_ENVIRONMENT:sandbox}
  
  # Payment Configuration
  default-currency: USD
  max-payment-amount: 10000.00
  min-payment-amount: 0.50
  refund-timeout-hours: 72
  settlement-batch-size: 100
  
  # Security Configuration
  encryption:
    key: ${PAYMENT_ENCRYPTION_KEY:}
    algorithm: AES/GCM/NoPadding
  
  # Rate Limiting
  rate-limit:
    enabled: true
    requests-per-minute: 100
    burst-capacity: 150

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      payment-provider:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s
  
  retry:
    instances:
      payment-provider:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2

# Management & Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 1.0

# Logging Configuration
logging:
  level:
    com.doordash.payment: INFO
    org.springframework.security: DEBUG
    org.springframework.kafka: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/payment-service.log
    max-size: 10MB
    max-history: 30

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  info:
    title: Payment Service API
    description: Comprehensive payment processing service for DoorDash
    version: 1.0.0
    contact:
      name: DoorDash Engineering
      email: engineering@doordash.com
