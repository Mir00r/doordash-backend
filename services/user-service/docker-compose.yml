version: '3.8'

services:
  user-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8083:8083"
    environment:
      # Database Configuration
      - DB_URL=jdbc:postgresql://user-db:5432/user_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      
      # Kafka Configuration
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      
      # JWT Configuration
      - JWT_SECRET=mySecretKey123456789012345678901234567890
      - JWT_EXPIRATION=86400000
      
      # S3 Configuration
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_REGION=us-east-1
      - S3_BUCKET_NAME=user-service-files
      - S3_ENDPOINT=http://minio:9000
      
      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
      
      # Spring Profile
      - SPRING_PROFILES_ACTIVE=docker
      
      # Logging
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_DOORDASH=DEBUG
    depends_on:
      - user-db
      - redis
      - kafka
      - minio
    networks:
      - user-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  user-db:
    image: postgres:15-alpine
    container_name: user-db
    environment:
      - POSTGRES_DB=user_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5434:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d/
    networks:
      - user-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: user-redis
    ports:
      - "6380:6379"
    volumes:
      - user_redis_data:/data
    networks:
      - user-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: user-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9093:9092"
    depends_on:
      - zookeeper
    networks:
      - user-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: user-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"
    networks:
      - user-network
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: user-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "9001:9000"
      - "9002:9001"
    volumes:
      - user_minio_data:/data
    networks:
      - user-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: user-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - user_prometheus_data:/prometheus
    networks:
      - user-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: user-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - user_grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - user-network
    restart: unless-stopped

volumes:
  user_db_data:
    driver: local
  user_redis_data:
    driver: local
  user_minio_data:
    driver: local
  user_prometheus_data:
    driver: local
  user_grafana_data:
    driver: local

networks:
  user-network:
    driver: bridge
