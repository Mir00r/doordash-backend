spring:
  application:
    name: user-service
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  # Database Configuration
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/user_db}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
  
  # Flyway Configuration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
    consumer:
      group-id: user-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: "com.doordash.*"
  
  # Mail Configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  
  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8081}
  
  # Servlet Configuration
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

# Server Configuration
server:
  port: ${SERVER_PORT:8084}
  servlet:
    context-path: /
  compression:
    enabled: true
  http2:
    enabled: true

# Management and Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 0.1

# Application Configuration
app:
  # File Storage Configuration
  storage:
    provider: ${STORAGE_PROVIDER:local} # local, s3
    local:
      upload-dir: ${LOCAL_UPLOAD_DIR:./uploads}
      base-url: ${LOCAL_BASE_URL:http://localhost:8084/files}
    s3:
      bucket-name: ${S3_BUCKET_NAME:doordash-user-assets}
      region: ${S3_REGION:us-east-1}
      access-key: ${S3_ACCESS_KEY:}
      secret-key: ${S3_SECRET_KEY:}
      base-url: ${S3_BASE_URL:}
  
  # Image Processing Configuration
  image:
    max-size: ${IMAGE_MAX_SIZE:5242880} # 5MB
    allowed-types: ${IMAGE_ALLOWED_TYPES:image/jpeg,image/png,image/webp}
    thumbnail:
      width: 150
      height: 150
      quality: 0.8
  
  # Address Validation Configuration
  address:
    geocoding:
      provider: ${GEOCODING_PROVIDER:mock} # mock, google, mapbox
      google:
        api-key: ${GOOGLE_GEOCODING_API_KEY:}
      mapbox:
        access-token: ${MAPBOX_ACCESS_TOKEN:}
    validation:
      strict-mode: ${ADDRESS_STRICT_MODE:false}
      require-coordinates: ${ADDRESS_REQUIRE_COORDINATES:false}
  
  # User Configuration
  user:
    profile:
      max-addresses: ${USER_MAX_ADDRESSES:10}
      avatar-required: ${USER_AVATAR_REQUIRED:false}
    preferences:
      default-cuisine-preferences: ${DEFAULT_CUISINE_PREFERENCES:}
      max-dietary-restrictions: ${MAX_DIETARY_RESTRICTIONS:20}
  
  # Integration Configuration
  integration:
    auth-service:
      base-url: ${AUTH_SERVICE_URL:http://localhost:8081}
      timeout: 5000
    restaurant-service:
      base-url: ${RESTAURANT_SERVICE_URL:http://localhost:8082}
      timeout: 5000
    order-service:
      base-url: ${ORDER_SERVICE_URL:http://localhost:8083}
      timeout: 5000
  
  # Event Configuration
  events:
    topics:
      user-profile-updated: user.profile.updated
      user-address-updated: user.address.updated
      user-preferences-updated: user.preferences.updated
      user-status-changed: user.status.changed
      user-deleted: user.deleted

# Logging Configuration
logging:
  level:
    com.doordash.user_service: ${LOG_LEVEL:INFO}
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  info:
    title: User Service API
    description: User Management Service for DoorDash Backend
    version: 1.0.0
    contact:
      name: DoorDash Engineering Team
      email: engineering@doordash.com

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  
  # H2 Database for development
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  
  h2:
    console:
      enabled: true
      path: /h2-console
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
  
  kafka:
    bootstrap-servers: localhost:9092

app:
  storage:
    provider: local
  address:
    geocoding:
      provider: mock

logging:
  level:
    com.doordash.user_service: DEBUG
    org.springframework.security: DEBUG

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  
  jpa:
    hibernate:
      ddl-auto: create-drop
  
  kafka:
    bootstrap-servers: localhost:9092

app:
  storage:
    provider: local
  address:
    geocoding:
      provider: mock

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker
  
  datasource:
    url: jdbc:postgresql://user-postgres:5432/user_db
  
  data:
    redis:
      host: user-redis
  
  kafka:
    bootstrap-servers: kafka:9092

server:
  port: 8084
